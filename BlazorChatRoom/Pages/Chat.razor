@using BlazorChatRoom.Data
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Threading;
@using BlazorChatRoom.Hubs;
@using BlazorChatRoom.Models;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _context;
@inject ChatRoomsModel _rooms
@inject NavigationManager _nav;
@using Microsoft.AspNetCore.WebUtilities;

@page "/Chat"

@code {

    private string newMessage;
    private HubConnection _hub;
    private bool isActive = false;
    private UserModel user = new UserModel();
    private RoomModel room;

    protected async override void OnInitialized()
    {

        var uri = _nav.ToAbsoluteUri(_nav.Uri);


        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var param))
        {
            Guid _room = new Guid(param.First());

            if (_rooms.ChatRooms.ContainsKey(_room))
            {
                room = _rooms.ChatRooms[_room];

            }
        }

        user.Username = _context.HttpContext.User.Identity.Name; //EDIT
        user.UserId = Guid.NewGuid(); //EDIT

        try
        {
            _hub = new HubConnectionBuilder()
            .WithUrl(_nav.BaseUri.TrimEnd('/') + ChatHub.HubPath)
            .Build();
            _hub.On<MessageModel>("RecieveMessage", RecieveMessage);
            await _hub.StartAsync();
            isActive = true;
            StateHasChanged();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    List<MessageModel> Messages = new List<MessageModel>();

    private async Task addMessage(string message)
    {
        MessageModel newMessage = new MessageModel { MessageBody = message };

        newMessage.Sender = user.Username;
        newMessage.TimeStamp = DateTime.Now;

        if (_hub != null || isActive == false)
        {
            await _hub.SendAsync("SendMessage", newMessage);
        }
        //Error


    }

    private void RecieveMessage(MessageModel message)
    {
        if (isActive)
        {
            Messages.Add(message);
            StateHasChanged();
        }
    }

}

@if (isActive)
{

    <div class="card border-primary my-3 mainChat">
        <div class="card-header text-center">

            <h3>Welcome to the Blazor Chat @user.Username!</h3>

        </div>
        <div class="card-body chatText">

            <div class="row">
                <div class="col h-25">
                    <div class="container-fluid">
                        @foreach (MessageModel item in Messages)
                        {
                            <div class="row mb-2">
                                <div class="col bg-info rounded-pill p-1 ps-2">
                                    <span class="text-dark">@item.Sender says: </span>
                                    <span class="text-light">@item.MessageBody</span>
                                    <br />
                                    <span class="text-light small">@item.TimeStamp.ToString("dd/MM/yyyy hh:mm:ss")</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </div>
        <div class="card-footer text-muted">
            <div class="row">
                <div class="col">
                    <div class="input-group my-2">
                        <input type="text" class="form-control" placeholder="Enter your message here..." @bind="newMessage" aria-label="Enter your message here..." aria-describedby="button" />
                        <button class="btn btn-primary" type="button" id="txtMessage" @onclick="() => addMessage(newMessage)">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

}



